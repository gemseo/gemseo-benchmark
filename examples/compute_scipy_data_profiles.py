from __future__ import print_function

from itertools import product
from os.path import dirname, join
from typing import Any, Callable, List

from numpy import array
from numpy.core.multiarray import ndarray
from scipy.optimize import minimize, rosen

from data_profiles.data_profile import DataProfile
from data_profiles.targets_generator import TargetsGenerator


def generate_values_history(
        an_objective,  # type: Callable[[Any], float]
        method,  # type: str
        start_point  # type: ndarray
):  # type: (...) -> List[float]
    """Minimize a function with a SciPy method and return the objective values
    generated by the minimizer.

    Arguments:
        an_objective: The objective function to minimize.
        method: The name of a SciPy optimization method.
        start_point: The starting point of the algorithm.

    Return:
       The list of successive objective values.

    """
    # Wrap the objective function with a history
    an_objective_history = list()

    def wrapped_objective(x):
        value = an_objective(x)
        an_objective_history.append(value)
        return value

    # Minimize the objective
    minimize(wrapped_objective, start_point, method=method)

    return an_objective_history


# Set the benchmarking problems
objective = rosen
start_points = [array([-2.0, -2.0]),
                array([-2.0, 2.0]),
                array([2.0, -2.0]),
                array([2.0, 2.0]),
                array([0.0, 0.0])]

# Set the reference algorithms
reference_algos = ["slsqp"]

# Generate the reference data
targets_generator = TargetsGenerator()
reference_histories = list()
for a_ref_algo, a_start_point in product(reference_algos, start_points):
    objective_history = generate_values_history(objective, a_ref_algo, a_start_point)
    targets_generator.add_history(objective_history)

# Compute the scale of target values
targets_number = 20
targets_values = {"Rosenbrock": targets_generator.run(targets_number, plot=True)}
print("Target values\n", targets_values["Rosenbrock"].to_list())

# Set the algorithms to be compared
methods = ['nelder-mead', 'powell', 'cg', 'bfgs', 'newton-cg',
           'l-bfgs-b', 'tnc', 'cobyla', 'slsqp', 'trust-constr',
           'dogleg', 'trust-ncg', 'trust-exact', 'trust-krylov']
methods.remove("newton-cg")
methods.remove("dogleg")
methods.remove("trust-ncg")
methods.remove("trust-exact")
methods.remove("trust-krylov")

# Compute and plot data profiles
data_profiles = DataProfile(targets_values)
for a_method, a_start_point in product(methods, start_points):
    history = generate_values_history(objective, a_method, a_start_point)
    data_profiles.add_history("Rosenbrock", a_method, history)
plot_path = join(dirname(__file__), "data_profile.jpg")
data_profiles.plot(destination_path=plot_path)
